package com.operatestructs.rbtree;

/**
 * red-black tree
 * Created by jiaming on 2018/7/12.
 */
public class RBTree {

    public void insert(RBNode rbNode){
        //1.如果插入的节点是根节点，那么违反规则2，就直接把节点修改为黑色
        //2.如果插入节点的父节点是黑色的，说明符合规则，什么都不做
        //3.如果插入节点的父节点是红色的，且父节点的另外一个子节点（叔叔节点）也是红色的，
            //那么将祖父节点变红，而父和叔节点变黑，然后设置祖父节点为当前节点，然后重新开始判断。
        //4.如果插入节点的父节点是红色，而叔父节点是黑色，且插入节点是其父的左子节点，而父节点是祖父节点的左子节点，
        //那么：把父节点变为黑色，祖父节点变为红色，然后对祖父节点进行右旋，然后重新开始判断。
        //5.如果插入节点的父节点是红色，而叔父节点是黑色，且插入节点是父的右子节点，而父节点是祖父节点的右子节点，那么：
        //把父节点变为黑色，祖父节点变为红色，然后对祖父节点进行左旋，然后重新开始判断。
    }

    public void afterInsert(RBNode rbNode){

    }

}
